;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Main screen mode for the clock: this takes care of updating the tube display
; with the time, as well as the VFD with the current date.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DisplayTime:
  ; first, update the RTC
  moveq   #6, d0
  jsr     Loader_API_Entry

  ; update nixies
  bsr.s   DisplayTime_UpdateNixieState
  bsr.w   Nixie_Update

  ; update VFD
  bsr.s   DisplayTime_UpdateVFD
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Updates the state of the nixie tube buffer.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DisplayTime_UpdateNixieState:
  moveq   #0, d0
  lea     (RAM_Nixie_State), a0

  ; update hours
  move.b  (Loader_TimeHours), d0
  move.b  d0, (a0)
  addq.l  #8, a0

  ; update minutes
  move.b  (Loader_TimeMinutes), d0
  move.b  d0, (a0)
  addq.l  #8, a0

  ; update seconds
  move.b  (Loader_TimeSeconds), d0
  move.b  d0, (a0)

  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Updates the VFD. For now, we just display the date in YYYY-MM-DD format as
; well as the weekday.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DisplayTime_UpdateVFD:
  ; set up scratch space
  lea     (RAM_Scratch), a0
  move.l  a0, a2
  moveq   #0, d0

  rept    6
  move.l  d0, (a0)+
  endr

  ; get day of week into a0
  moveq   #0, d0
  move.b  (Loader_DateDayOfWeek), d0
  add.w   d0, d0

  lea     DayOfWeekNames(pc), a1
  move.w  (a1, d0.w), d1
  lea     (a1, d1.w), a0

  ; copy day of week name
.CopyDayName:
  move.b  (a0)+, d0
  tst.b   d0
  beq.s   .CopyDayNameDone

  move.b  d0, (a2)+

.CopyDayNameDone:
  ; put a space after the day name
  move.b  #' ', (a2)+

  ; write the year (lol y2k)
  move.w  #'20', (a2)+

  move.b  (Loader_DateYear), d1
  bsr.s   .WriteBCDAsAscii

  ; write the month
  move.b  #'-', (a2)+

  move.b  (Loader_DateMonth), d1
  bsr.s   .WriteBCDAsAscii

  ; write the day of month
  move.b  #'-', (a2)+

  move.b  (Loader_DateDay), d1
  bsr.s   .WriteBCDAsAscii

  ; set position to col 1, row 1; then use 1x2 magnification
  lea     .SetPosCmd, a0
  bsr.w   VFD_SendCommand

  lea     .MagnifyCmd, a0
  bsr.w   VFD_SendCommand

  ; now, copy that into the VFD
  moveq   #24, d0
  lea     (RAM_Scratch), a0
  bsr.w   VFD_SendCommand_WithLength

  ; reset to use normal size letters
  lea     .NormalSizeCmd, a0
  bsr.w   VFD_SendCommand

  rts

; Writes a byte (in d1) to a2 as ASCII. a2 is incremented after.
.WriteBCDAsAscii:
  move.b  d1, d0
  lsr.b   #4, d0
  add.b   #'0', d0
  move.b  d0, (a2)+

  move.b  d1, d0
  and.b   #$0F, d0
  add.b   #'0', d0
  move.b  d0, (a2)+

  rts


.SetPosCmd:
  dc.b  6, $1F, $24, 0, $0, 0, $0
  even
.MagnifyCmd:
  dc.b  6, $1F, $28, $67, $40, 1, 2
  even
.NormalSizeCmd:
  dc.b  6, $1F, $28, $67, $40, 1, 1
  even
