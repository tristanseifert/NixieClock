;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NixieClock bootloader
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  list
  org   $0

  include "hardware.68k"
  include "ram.68k"
  include "loader_api.68k"

; vector table
VectorTable:
  dc.l  RAM_Stack_Base, EntryPoint

  dc.l  Exception_BusError, Exception_AddressError, Exception_Illegal, Exception_DivByZero
  dc.l  Exception_Chk, Exception_TrapV, Exception_PrivilegeViolation, Exception_Trace
  dc.l  Exception_LineA, Exception_LineF, Exception_Reserved, Exception_Reserved
  dc.l  Exception_Reserved

  ; uninitialized interrupt
  dc.l  Exception_Other

  ; reserved
  rept 8
  dc.l  Exception_Reserved
  endr

  ; interrupts
  dc.l  IRQ_Spurious, IRQ_Lvl1, IRQ_Lvl2, IRQ_Lvl3
  dc.l  IRQ_Lvl4, IRQ_Lvl5, IRQ_Lvl6, IRQ_Lvl7

  ; traps
  dc.l  Trap_EnterMonitor
  rept 15
  dc.l  Exception_UnimplementedTrap
  endr

  ; reserved
  rept 16
  dc.l  Exception_Reserved
  endr

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exception handlers
;
; Any abnormal conditions (e.g. fatal exceptions) are handled by putting the
; exception reason in d0 and calling Exception_Handle.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Exception_BusError:
  move.b  #$01, d0
  bra.w   Exception_Handle

Exception_AddressError:
  move.b  #$02, d0
  bra.w   Exception_Handle

Exception_Illegal:
  move.b  #$03, d0
  bra.w   Exception_Handle

Exception_DivByZero:
  move.b  #$04, d0
  bra.w   Exception_Handle

Exception_Chk:
  move.b  #$05, d0
  bra.w   Exception_Handle

Exception_TrapV:
  move.b  #$06, d0
  bra.w   Exception_Handle

Exception_PrivilegeViolation:
  move.b  #$07, d0
  bra.w   Exception_Handle

Exception_Trace:
  move.b  #$08, d0
  bra.w   Exception_Handle

Exception_LineA:
  move.b  #$09, d0
  bra.w   Exception_Handle

Exception_LineF:
  move.b  #$0A, d0
  bra.w   Exception_Handle

Exception_Other:
  move.b  #$0B, d0
  bra.w   Exception_Handle

Exception_Reserved:
  move.b  #$0C, d0
  bra.w   Exception_Handle



; this does nothing rn
Exception_Handle:
  ; disable all interrupts
  move  $2700, sr

  ; wait lol
  nop
  bra.s Exception_Handle

; enter the monitor from a trap
Trap_EnterMonitor:
  nop
  bra.s Trap_EnterMonitor

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; IRQ handlers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IRQ_Spurious:
  move.b  #$0D, d0
  bra.w   Exception_Handle

IRQ_Lvl1:
  move.l  a0, -(sp)
  lea     (Loader_IRQ1), a0
  jsr     (a0)
  move.l  (sp)+, a0
  rte

IRQ_Lvl2:
  move.l  a0, -(sp)
  lea     (Loader_IRQ2), a0
  jsr     (a0)
  move.l  (sp)+, a0
  rte

IRQ_Lvl3:
  move.l  a0, -(sp)
  lea     (Loader_IRQ3), a0
  jsr     (a0)
  move.l  (sp)+, a0
  rte

IRQ_Lvl4:
  move.l  a0, -(sp)
  lea     (Loader_IRQ4), a0
  jsr     (a0)
  move.l  (sp)+, a0
  rte

IRQ_Lvl5:
  move.l  a0, -(sp)
  lea     (Loader_IRQ5), a0
  jsr     (a0)
  move.l  (sp)+, a0
  rte

IRQ_Lvl6:
  move.l  a0, -(sp)
  lea     (Loader_IRQ6), a0
  jsr     (a0)
  move.l  (sp)+, a0
  rte

IRQ_Lvl7:
  move.l  a0, -(sp)
  lea     (Loader_IRQ7), a0
  jsr     (a0)
  move.l  (sp)+, a0
  rte



IRQ_Unused:
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Trap handlers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Exception_UnimplementedTrap:
  ; move.b  #$0E, d0
  bra.w   Exception_Handle



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Loader entry point
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EntryPoint:
  ; disable all interrupts
  move    #$2700, sr

  ; clear all RAM
  lea     (RAM_Base), a0

  moveq   #0, d0
  move.w  #(131072/4)-1, d1

.clear:
  move.l  d0, (a0)+
  dbf     d1, .clear

  ; initialize IRQ vectors
  move.l  #IRQ_Unused, d0

  move.l  d0, Loader_IRQ1
  move.l  d0, Loader_IRQ2
  move.l  d0, Loader_IRQ3
  move.l  d0, Loader_IRQ4
  move.l  d0, Loader_IRQ5
  move.l  d0, Loader_IRQ6
  move.l  d0, Loader_IRQ7

  ; set up hardware
  bsr.w   MC68681_Reset
  bsr.w   RTC_Reset

  ; enter loader menu
  bra.w   Loader_Menu

  ; TODO: do stuff here, lmfao
  nop
  bra.s   EntryPoint

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Given a base address, validate the app header at that location, and if valid,
; jump to it.
;
; a0: Start of app header
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Loader_RunApp:
  ; disable all interrupts
  move    #$2700, sr

  ; back up base of table
  move.l  a0, a2

  ; check for magic
  move.w  (a0)+, d0
  cmp.w   #420, d0
  bne.s   .InvalidMagic

  ; validate version: anything with the high byte equal to $01 is supported
  move.w  (a0)+, d0
  and.w   #$FF00, d0
  cmp.w   #$0100, d0
  bne.s   .InvalidVersion

  ; compute checksum
  move.l  (a0)+, a1
  add.l   a2, a1
  move.l  (a0)+, d1
  subq.l  #1, d1
  
  moveq   #0, d0
  moveq   #0, d2

.ChecksumLoop:
  move.b  (a1)+, d2
  add.l   d2, d0
  dbf     d1, .ChecksumLoop

  ; compare it against what's expected
  cmp.l   (a0)+, d0
  bne.s   .InvalidChecksum

  ; if we get here, the header is valid, so jump to the app
  move.l  (a0)+, d0
  move.l  (a0), sp
  jmp     (a2, d0.w)



.InvalidMagic:
  reset
  moveq   #-1, d0
  rts
.InvalidVersion:
  reset
  moveq   #-2, d0
  rts
.InvalidChecksum:
  reset
  moveq   #-3, d0
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Enters the loader main menu.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Loader_Menu:
  ; we need interrupts on
  move    #$2200, sr

.MainLoop:
  ; print message
  lea     Loader_Menu_Text(pc), a0
  bsr.w   lib_strlen

  swap    d0
  move.w  #0, d0

  lea     Loader_Menu_Text(pc), a0
  bsr.w   MC68681_UartTx

  ; attempt to receive response
  bsr.w   MC68681_UartRxChar
  swap    d0
  tst.w   d0
  beq.s   .CheckResponse

  ; there was an error
  ; todo: handle it
  bra.s   .MainLoop

.CheckResponse:
  ; we need to get the character into the low word again
  swap    d0

  ; start ROM app?
  cmp.b   #'1', d0
  bne.s   .CheckRAMApp

  ; start app in ROM at $008000
  lea     ROM_App_Base, a0
  bsr.w   Loader_RunApp

  ; if we get here, d0 will contain an error code
  lea     Loader_Menu_ErrRunApp(pc), a0
  bsr.w   Loader_Menu_PrintError
  bra.s   .MainLoop

.CheckRAMApp:
  cmp.b   #'2', d0
  bne.s   .CheckDownload

  ; start app in RAM at $070000
  lea     $070000, a0
  bsr.w   Loader_RunApp

  ; if we get here, d0 will contain an error code
  lea     Loader_Menu_ErrRunApp(pc), a0
  bsr.w   Loader_Menu_PrintError
  bra.s   .MainLoop

.CheckDownload:
  cmp.b   #'3', d0
  bne.s   .CheckMonitor

  ; enter download subroutine
  ; XXX: todo
  bra.s   .MainLoop

.CheckMonitor:
  cmp.b   #'4', d0
  bne.s   .InvalidOption

  ; enter monitor
  ; XXX: todo
  bra.s   .MainLoop

.InvalidOption:
  ; there was an invalid selection
  lea     Loader_Menu_Invalid(pc), a0
  bsr.w   lib_strlen

  swap    d0
  move.w  #0, d0

  lea     Loader_Menu_Invalid(pc), a0
  bsr.w   MC68681_UartTx

  ; repeat main loop
  bra.s   .MainLoop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Prints an error code (in d0) with the description string in a0, similar to
; perror().
;
; INPUTS:
;   d0: error code
;   a0: description string (zero terminated)
; OUTPUTS:
;   None
; CLOBBERS:
;   d0-d2, a0-a1
;
Loader_Menu_PrintError:
  ; save the error code for later
  move.l  d0, -(sp)

  ; first, print the description string
  move.l  a0, a1
  bsr.w   lib_strlen

  swap    d0
  move.w  #0, d0

  move.l  a1, a0
  bsr.w   MC68681_UartTx

  ; print a colon
  moveq   #2, d0
  swap    d0
  lea     .Colon(pc), a0
  bsr.w   MC68681_UartTx

  ; now, get the error code and print it in hex
  move.l  (sp)+, d0
  lea     (Loader_Uart_Rx_Buffer), a0
  bsr.w   lib_dectohex

  moveq   #8, d0
  swap    d0
  lea     (Loader_Uart_Rx_Buffer), a0
  bsr.w   MC68681_UartTx
  ; bra.w   MC68681_UartTx

  ; also, a newline
  moveq   #2, d0
  swap    d0
  lea     .Newline(pc), a0
  bra.w   MC68681_UartTx
  ; bsr.w   MC68681_UartTx

  ; done!
.Done:
  rts

.Colon:
  dc.b    ": ", 0
  even
.Newline:
  dc.b    " ", $0A, 0
  even

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Loader_Menu_Text:
  dc.b    "Loader Menu", $0A
  dc.b    "Select an option", $0A
  dc.b    "1) Start ROM app from $008000", $0A
  dc.b    "2) Start RAM app from $070000", $0A
  dc.b    "3) Download to RAM", $0A
  dc.b    "4) Enter monitor", $0A
  dc.b    "> ", 0
  even

Loader_Menu_Invalid:
  dc.b    "Invalid selection", $0A, 0
  even

Loader_Menu_ErrRunApp:
  dc.b    "Error starting app", 0
  even



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Loader tick function, this should be called periodically at 50Hz.
;
; This routine is guaranteed to not clobber any registers. It can, however, use
; the stack to back up registers.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Loader_Handle_Tick:
  ; just increment timer
  addq.l  #1, (Loader_Tick)
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; library type routines
  include "lib.68k"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Hardware helper routines
	include	"68681.68k"
  include "rtc.68k"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Loader services
Svc_Table:
  ; 00: no-op
  dc.w    Svc_NoOp-Svc_Table
  ; 01: write bytes to UART
  dc.w    Svc_UartOut-Svc_Table
  ; 02: read bytes from UART
  dc.w    Svc_UartIn-Svc_Table
  ; 03: Delay program
  dc.w    Svc_Delay-Svc_Table
  ; 04: Get input state
  dc.w    Svc_ReadIO-Svc_Table
  ; 05: Set output state
  dc.w    Svc_WriteIO-Svc_Table
  ; 06: Read RTC
  dc.w    Svc_ReadRtc-Svc_Table
  ; 07: Write RTC
  dc.w    Svc_WriteRtc-Svc_Table
Svc_Table_End:

  include "loader_svc.68k"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Metadata
Info_BuildDate:
  incbin  "builddate.txt"
  dc.b    0
  even

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bootloader API entry point
;
; Back up d1, a0 and restore when we leave the function. d0 is overwritten
; anyways by the status in routines.
;
  org     $7F80

Svc_Entry:
  ; back up d1, a0
  movem.l d1/a0, -(sp)

  ; check that the request is in bounds
  moveq   #(Svc_Table_End-Svc_Table), d1
  cmp.b   d0, d1
  bpl.s   .Invalid

  ; get offset into table and jump
  lea     Svc_Table(pc), a0
  ; move.w  Svc_Table(pc, d0.w), d1
  ; jmp     Svc_Table(pc, d1.w)
  move.w  (a0, d0.w), d1
  jsr     (a0, d1.w)

.Cleanup:
  movem.l (sp)+, d1/a0

.Invalid:
  ; set error code
  moveq   #-1, d0
  bra.s   .Cleanup
